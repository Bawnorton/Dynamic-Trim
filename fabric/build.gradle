plugins {
    id "com.github.johnrengelman.shadow" version "7.1.2"
    id "me.modmuss50.mod-publish-plugin" version "0.3.3"
}

architectury {
    platformSetupLoomIde()
    fabric()
}

loom {
    accessWidenerPath = project(":common").loom.accessWidenerPath
}

configurations {
    common
    shadowCommon // Don't use shadow from the shadow plugin since it *excludes* files.
    compileClasspath.extendsFrom common
    runtimeClasspath.extendsFrom common
    developmentFabric.extendsFrom common
}

dependencies {
    modImplementation "net.fabricmc:fabric-loader:${rootProject.fabric_loader_version}"
    modApi "net.fabricmc.fabric-api:fabric-api:${rootProject.fabric_api_version}"
    // Remove the next line if you don't want to depend on the API
    modApi "dev.architectury:architectury-fabric:${rootProject.architectury_version}"

    // mixin extras
    include(implementation(annotationProcessor("com.github.llamalad7.mixinextras:mixinextras-fabric:${rootProject.mixin_extras_version}")))
    include(implementation(annotationProcessor("com.github.bawnorton.mixinsquared:mixinsquared-fabric:${rootProject.mixin_squared_version}")))

    // compats
    modCompileOnly("maven.modrinth:allthetrims:${rootProject.allthetrims_version}")
    modCompileOnly("maven.modrinth:betterend:${project.betterend_version}")
    modCompileOnly("maven.modrinth:BCLib:${project.bclib_version}") { transitive false }
    modCompileOnly(fileTree(dir: "libs", include: ["*.jar"])) // wunderlib 1.1.3 with mapping conflict resolved

    common(project(path: ":common", configuration: "namedElements")) { transitive false }
    shadowCommon(project(path: ":common", configuration: "transformProductionFabric")) { transitive false }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

shadowJar {
    exclude "architectury.common.json"

    configurations = [project.configurations.shadowCommon]
    archiveClassifier = "dev-shadow"
}

remapJar {
    injectAccessWidener = true
    input.set shadowJar.archiveFile
    dependsOn shadowJar
    archiveClassifier = "fabric+${rootProject.minecraft_version}"
}

jar {
    archiveClassifier = "dev"
}

sourcesJar {
    def commonSources = project(":common").sourcesJar
    dependsOn commonSources
    from commonSources.archiveFile.map { zipTree(it) }
}

components.java {
    withVariantsFromConfiguration(project.configurations.shadowRuntimeElements) {
        skip()
    }
}

publishing {
    publications {
        mavenFabric(MavenPublication) {
            artifactId = rootProject.archives_base_name + "-" + project.name
            from components.java
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        // Add repositories to publish to here.
    }
}

publishMods {
    file = remapJar.archiveFile
    changelog = "[Changelog](https://github.com/Andrew6rant/Dynamic-Trim/releases/tag/%s)".formatted(project.version)
    type = STABLE
    modLoaders.add("fabric")

    github {
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        repository = "Andrew6rant/Dynamic-Trim"
        commitish = "arch-port"
        changelog = file("../CHANGELOG.md").readLines().join("\n")
        displayName = project.version
    }

    curseforge {
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        projectId = "901658"
        minecraftVersions.addAll("1.20", "1.20.1")
        displayName = "dynamictrim-%s-%s.jar".formatted(project.version, remapJar.archiveClassifier.get())

        requires {
            slug = "architectury-api"
        }
    }

    modrinth {
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        projectId = "zFCKsjVY"
        minecraftVersions.addAll("1.20", "1.20.1")
        displayName = "Dynamic Trim %s".formatted(project.version)

        requires {
            slug = "architectury-api"
        }
    }
}